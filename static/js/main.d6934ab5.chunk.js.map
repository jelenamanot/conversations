{"version":3,"sources":["ducks/conversationDuck.js","ducks/userDuck.js","ducks/index.js","config.js","services/conversationService.js","sagas/conversationSaga.js","services/userService.js","sagas/userSaga.js","sagas/index.js","store.js","components/Header/styles.js","components/Header/index.js","components/ConversationList/styles.js","components/ConversationList/index.js","components/MessageList/styles.js","components/MessageList/index.js","components/MessageForm/index.js","components/ConversationHeader/styles.js","components/ConversationHeader/index.js","screens/ConversationScreen/styles.js","screens/ConversationScreen/component.js","screens/ConversationScreen/container.js","App.js","reportWebVitals.js","index.js"],"names":["actionTypes","initialState","conversations","messages","error","isLoading","currentConversationId","actionCreators","getConversations","type","getConversationById","id","postMessage","content","user","getUser","rootReducer","combineReducers","conversation","state","action","newMessage","appReducer","API_URL","theme","primaryColor","a","axios","get","response","data","console","post","service","getConversationMessages","getConversationsSaga","getConversationByIdSaga","postMessageSaga","conversationSaga","call","ConversationService","put","conversationActionTypes","select","participant","created_at","Date","all","takeEvery","getUserSaga","userSaga","UserService","userActionTypes","rootSaga","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","run","Header","styled","Layout","Title","h1","Text","span","fullName","first_name","last_name","title","src","avatar_url","alt","List","div","ListItem","isCurrent","ConversationList","onClick","loggedUserId","map","participants","filter","p","strong","Comment","C","$isUser","css","MessageList","messagesEndRef","React","useRef","useEffect","current","scrollIntoView","behavior","length","message","isUser","author","avatar","datetime","format","formatDistanceToNow","description","ref","defaultProps","MessageForm","useState","setContent","Item","TextArea","rows","onChange","e","target","value","placeholder","className","disabled","ConversationHeader","Left","Icons","name","size","level","UserAddOutlined","StarOutlined","BellOutlined","L","Content","ListWrapper","ConversationComponent","setParticipant","currParticipant","spinning","connect","dispatch","bindActionCreators","conversationActionCreators","userActionCreators","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6934ab5.chunk.js","sourcesContent":["export const actionTypes = {\n\tCONVERSATION_GET_REQUEST: 'CONVERSATION_GET_REQUEST',\n\tCONVERSATION_GET_SUCCESS: 'CONVERSATION_GET_SUCCESS',\n\tCONVERSATION_GET_FAILURE: 'CONVERSATION_GET_FAILURE',\n\n\tCONVERSATION_GET_BY_ID_REQUEST: 'CONVERSATION_GET_BY_ID_REQUEST',\n\tCONVERSATION_GET_BY_ID_SUCCESS: 'CONVERSATION_GET_BY_ID_SUCCESS',\n\tCONVERSATION_GET_BY_ID_FAILURE: 'CONVERSATION_GET_BY_ID_FAILURE',\n\n\tCONVERSATION_POST_MESSAGE_REQUEST: 'CONVERSATION_POST_MESSAGE_REQUEST',\n\tCONVERSATION_POST_MESSAGE_SUCCESS: 'CONVERSATION_POST_MESSAGE_SUCCESS',\n\tCONVERSATION_POST_MESSAGE_FAILURE: 'CONVERSATION_POST_MESSAGE_FAILURE'\n};\n\nexport const initialState = {\n\tconversations: [],\n\tmessages: [],\n\terror: null,\n\tisLoading: false,\n\tcurrentConversationId: null\n};\n\nexport default function reducer(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase actionTypes.CONVERSATION_GET_REQUEST:\n\t\tcase actionTypes.CONVERSATION_POST_MESSAGE_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true\n\t\t\t};\n\n\t\tcase actionTypes.CONVERSATION_GET_BY_ID_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true,\n\t\t\t\tcurrentConversationId: action.id\n\t\t\t};\n\n\t\tcase actionTypes.CONVERSATION_GET_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tconversations: action.conversations,\n\t\t\t\tisLoading: initialState.isLoading,\n\t\t\t\terror: null\n\t\t\t};\n\n\t\tcase actionTypes.CONVERSATION_GET_BY_ID_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmessages: action.messages,\n\t\t\t\tisLoading: initialState.isLoading,\n\t\t\t\terror: null\n\t\t\t};\n\n\t\tcase actionTypes.CONVERSATION_POST_MESSAGE_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: initialState.isLoading,\n\t\t\t\tmessages: [...state.messages, action.newMessage],\n\t\t\t\terror: null\n\t\t\t};\n\n\t\tcase actionTypes.CONVERSATION_GET_FAILURE:\n\t\tcase actionTypes.CONVERSATION_GET_BY_ID_FAILURE:\n\t\tcase actionTypes.CONVERSATION_POST_MESSAGE_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: action.error,\n\t\t\t\tisLoading: initialState.isLoading\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport const actionCreators = {\n\tgetConversations: () => ({\n\t\ttype: actionTypes.CONVERSATION_GET_REQUEST\n\t}),\n\tgetConversationById: (id) => ({\n\t\ttype: actionTypes.CONVERSATION_GET_BY_ID_REQUEST,\n\t\tid\n\t}),\n\tpostMessage: (content) => ({\n\t\ttype: actionTypes.CONVERSATION_POST_MESSAGE_REQUEST,\n\t\tcontent\n\t})\n};\n","export const actionTypes = {\n\tUSER_GET_REQUEST: 'USER_GET_REQUEST',\n\tUSER_GET_SUCCESS: 'USER_GET_SUCCESS',\n\tUSER_GET_FAILURE: 'USER_GET_FAILURE'\n};\n\nexport const initialState = {\n\tuser: {},\n\terror: null,\n\tisLoading: false\n};\n\nexport default function reducer(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase actionTypes.USER_GET_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true\n\t\t\t};\n\t\tcase actionTypes.USER_GET_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: action.user,\n\t\t\t\tisLoading: initialState.isLoading,\n\t\t\t\terror: null\n\t\t\t};\n\t\tcase actionTypes.USER_GET_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: action.error,\n\t\t\t\tisLoading: initialState.isLoading\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport const actionCreators = {\n\tgetUser: () => ({\n\t\ttype: actionTypes.USER_GET_REQUEST\n\t})\n};\n","import { combineReducers } from 'redux';\n\nimport conversationReducer from './conversationDuck';\nimport userReducer from './userDuck';\n\nconst rootReducer = combineReducers({\n\tconversation: conversationReducer,\n\tuser: userReducer\n});\n\nconst appReducer = (state, action) => {\n\treturn rootReducer(state, action);\n};\n\nexport default appReducer;\n","export const API_URL =\n\t'https://csjar37r18.execute-api.eu-central-1.amazonaws.com/dev';\n\nexport const theme = {\n\tprimaryColor: '#4344A7'\n};\n","import axios from 'axios';\n// Config\nimport { API_URL } from 'config';\n\nasync function getConversations() {\n\ttry {\n\t\tconst response = await axios.get(`${API_URL}/conversations`);\n\t\treturn response.data;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nasync function getConversationMessages(id) {\n\ttry {\n\t\tconst response = await axios.get(`${API_URL}/conversations/${id}/messages`);\n\t\treturn response.data;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nasync function postMessage(id, content) {\n\ttry {\n\t\tconst response = await axios.post(\n\t\t\t`${API_URL}/conversations/${id}/messages`,\n\t\t\t{\n\t\t\t\tcontent\n\t\t\t}\n\t\t);\n\t\treturn response.data;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nconst service = {\n\tgetConversations,\n\tgetConversationMessages,\n\tpostMessage\n};\n\nexport default service;\n","import { all, put, call, takeEvery, select } from 'redux-saga/effects';\nimport ConversationService from 'services/conversationService';\nimport { actionTypes as conversationActionTypes } from 'ducks/conversationDuck';\n\nfunction* getConversationsSaga() {\n\ttry {\n\t\tconst conversations = yield call(ConversationService.getConversations);\n\t\tyield put({\n\t\t\ttype: conversationActionTypes.CONVERSATION_GET_SUCCESS,\n\t\t\tconversations\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: conversationActionTypes.CONVERSATION_GET_FAILURE,\n\t\t\terror\n\t\t});\n\t}\n}\n\nfunction* getConversationByIdSaga(action) {\n\ttry {\n\t\tconst messages = yield call(\n\t\t\tConversationService.getConversationMessages,\n\t\t\taction.id\n\t\t);\n\n\t\tyield put({\n\t\t\ttype: conversationActionTypes.CONVERSATION_GET_BY_ID_SUCCESS,\n\t\t\tmessages\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: conversationActionTypes.CONVERSATION_GET_BY_ID_FAILURE,\n\t\t\terror\n\t\t});\n\t}\n}\n\nfunction* postMessageSaga(action) {\n\ttry {\n\t\tconst { currentConversationId } = yield select(\n\t\t\t(state) => state.conversation\n\t\t);\n\t\tconst { user } = yield select((state) => state.user);\n\n\t\tconst newMessage = yield call(\n\t\t\tConversationService.postMessage,\n\t\t\tcurrentConversationId,\n\t\t\taction.content\n\t\t);\n\n\t\tyield put({\n\t\t\ttype: conversationActionTypes.CONVERSATION_POST_MESSAGE_SUCCESS,\n\t\t\tnewMessage: {\n\t\t\t\t...newMessage,\n\t\t\t\tparticipant: user,\n\t\t\t\tcreated_at: new Date()\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: conversationActionTypes.CONVERSATION_POST_MESSAGE_FAILURE,\n\t\t\terror\n\t\t});\n\t}\n}\n\nexport default function* conversationSaga() {\n\tyield all([\n\t\ttakeEvery(\n\t\t\tconversationActionTypes.CONVERSATION_GET_REQUEST,\n\t\t\tgetConversationsSaga\n\t\t),\n\t\ttakeEvery(\n\t\t\tconversationActionTypes.CONVERSATION_GET_BY_ID_REQUEST,\n\t\t\tgetConversationByIdSaga\n\t\t),\n\t\ttakeEvery(\n\t\t\tconversationActionTypes.CONVERSATION_POST_MESSAGE_REQUEST,\n\t\t\tpostMessageSaga\n\t\t)\n\t]);\n}\n","import axios from 'axios';\n// Config\nimport { API_URL } from 'config';\n\nasync function getUser() {\n\ttry {\n\t\tconst response = await axios.get(`${API_URL}/user`);\n\t\treturn response.data;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nconst service = {\n\tgetUser\n};\n\nexport default service;\n","import { all, put, call, takeEvery } from 'redux-saga/effects';\nimport UserService from 'services/userService';\nimport { actionTypes as userActionTypes } from 'ducks/userDuck';\n\nfunction* getUserSaga() {\n\ttry {\n\t\tconst user = yield call(UserService.getUser);\n\n\t\tyield put({\n\t\t\ttype: userActionTypes.USER_GET_SUCCESS,\n\t\t\tuser\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: userActionTypes.USER_GET_FAILURE,\n\t\t\terror\n\t\t});\n\t}\n}\n\nexport default function* userSaga() {\n\tyield all([takeEvery(userActionTypes.USER_GET_REQUEST, getUserSaga)]);\n}\n","import { all } from 'redux-saga/effects';\n\nimport conversationSaga from './conversationSaga';\nimport userSaga from './userSaga';\n\nexport default function* rootSaga() {\n\tyield all([conversationSaga(), userSaga()]);\n}\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from 'ducks';\nimport rootSaga from 'sagas';\n\nconst appReducer = (state, action) => {\n\treturn rootReducer(state, action);\n};\n\nconst sagaMiddleware = createSagaMiddleware();\nlet enhancer = applyMiddleware(sagaMiddleware);\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nenhancer = composeEnhancers(enhancer);\n\nconst store = createStore(appReducer, enhancer);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import styled from 'styled-components';\nimport { Layout } from 'antd';\n\nexport const Header = styled(Layout.Header)`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tbackground-color: ${({ theme }) => theme.primaryColor};\n`;\n\nexport const Title = styled.h1`\n\tcolor: white;\n\tmargin: 0;\n`;\n\nexport const Text = styled.span`\n\tcolor: white;\n\tfont-style: bold;\n\tmargin-left: 10px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, Avatar } from 'antd';\nimport * as S from './styles';\n\nconst Header = ({ user }) => {\n\tconst fullName = `${user.first_name} ${user.last_name}`;\n\treturn (\n\t\t<S.Header>\n\t\t\t<S.Title>Conversations</S.Title>\n\t\t\t<Tooltip title=\"Your profile\">\n\t\t\t\t<Avatar src={user.avatar_url} alt={fullName} />\n\t\t\t\t<S.Text>{fullName}</S.Text>\n\t\t\t</Tooltip>\n\t\t</S.Header>\n\t);\n};\n\nHeader.propTypes = {\n\tuser: PropTypes.object.isRequired\n};\n\nexport default Header;\n","import styled from 'styled-components';\n\nexport const List = styled.div`\n\theight: 85vh;\n\toverflow-y: auto;\n\twidth: 25%;\n`;\n\nexport const ListItem = styled.div`\n\tmargin: 8px 8px 8px 0;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 20px;\n\tbackground-color: white;\n\tcursor: pointer;\n\tborder-left-width: 5px;\n\tborder-left-style: solid;\n\tborder-left-color: ${({ isCurrent, theme }) =>\n\t\tisCurrent ? theme.primaryColor : 'white'};\n\n\t& > .ant-avatar {\n\t\tmargin-right: 15px;\n\t}\n\n\t@media (max-width: 992px) {\n\t\t.ant-typography {\n\t\t\tfont-size: 12px;\n\t\t}\n\t}\n\n\t@media (max-width: 768px) {\n\t\t.ant-typography {\n\t\t\tdisplay: none;\n\t\t}\n\t\t.ant-avatar {\n\t\t\tmargin-right: 0;\n\t\t}\n\t}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, Avatar } from 'antd';\n\nimport * as S from './styles';\n\nconst ConversationList = ({\n\tconversations,\n\tonClick,\n\tloggedUserId,\n\tcurrentConversationId\n}) => {\n\treturn (\n\t\t<S.List>\n\t\t\t{conversations.map((conversation) => {\n\t\t\t\tconst participant = conversation.participants.filter(\n\t\t\t\t\t(p) => p.id !== loggedUserId\n\t\t\t\t)[0];\n\n\t\t\t\tconst isCurrent = conversation.id === currentConversationId;\n\n\t\t\t\tconst fullName = `${participant.first_name} ${participant.last_name}`;\n\t\t\t\treturn (\n\t\t\t\t\t<S.ListItem\n\t\t\t\t\t\tkey={conversation.id}\n\t\t\t\t\t\tonClick={() => onClick(conversation.id, participant)}\n\t\t\t\t\t\tisCurrent={isCurrent}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Avatar src={participant.avatar_url} alt={fullName} />\n\t\t\t\t\t\t<Typography.Text strong>{fullName}</Typography.Text>\n\t\t\t\t\t</S.ListItem>\n\t\t\t\t);\n\t\t\t})}\n\t\t</S.List>\n\t);\n};\n\nConversationList.propTypes = {\n\tconversations: PropTypes.array.isRequired,\n\tonClick: PropTypes.func.isRequired\n};\n\nexport default ConversationList;\n","import styled, { css } from 'styled-components';\nimport { Comment as C } from 'antd';\n\nexport const List = styled.div`\n\theight: 55vh;\n\toverflow-y: auto;\n`;\n\nexport const Comment = styled(C)`\n\tpadding: 0 10px;\n\tmargin: 6px 51% 6px 0;\n\tborder-radius: 8px;\n\tbackground-color: white;\n\n\t${({ $isUser, theme }) =>\n\t\t$isUser &&\n\t\tcss`\n\t\t\tmargin: 6px 0 6px 51%;\n\t\t\tbackground-color: ${theme.primaryColor};\n\t\t`};\n`;\n\nexport const Text = styled.p`\n\tcolor: ${({ $isUser }) => ($isUser ? 'white' : 'black')};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNow, format } from 'date-fns';\nimport { Empty, Tooltip, Avatar } from 'antd';\n\nimport * as S from './styles';\n\nconst MessageList = ({ messages, loggedUserId }) => {\n\tconst messagesEndRef = React.useRef(null);\n\n\tconst scrollToBottom = () => {\n\t\tmessagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n\t};\n\n\tReact.useEffect(scrollToBottom, [messages]);\n\n\treturn (\n\t\t<S.List>\n\t\t\t{!messages.length ? (\n\t\t\t\t<Empty description=\"Please choose conversation\" />\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t{messages.map((message) => {\n\t\t\t\t\t\tconst { participant, created_at, content } = message;\n\t\t\t\t\t\tconst fullName = `${participant.first_name} ${participant.last_name}`;\n\t\t\t\t\t\tconst isUser = participant.id === loggedUserId;\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<S.Comment\n\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\t$isUser={isUser}\n\t\t\t\t\t\t\t\tauthor={<S.Text $isUser={isUser}>{fullName}</S.Text>}\n\t\t\t\t\t\t\t\tavatar={<Avatar src={participant.avatar_url} alt={fullName} />}\n\t\t\t\t\t\t\t\tcontent={<S.Text $isUser={isUser}>{content}</S.Text>}\n\t\t\t\t\t\t\t\tdatetime={\n\t\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\t\ttitle={format(new Date(created_at), 'yyyy-MM-dd HH:mm:ss')}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{formatDistanceToNow(new Date(created_at))}\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div ref={messagesEndRef} />\n\t\t</S.List>\n\t);\n};\n\nMessageList.propTypes = {\n\tmessages: PropTypes.array.isRequired,\n\tloggedUserId: PropTypes.string\n};\n\nMessageList.defaultProps = {\n\tloggedUserId: null\n};\n\nexport default MessageList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment, Avatar, Input, Form, Button } from 'antd';\n\nconst MessageForm = ({ user, isLoading, onClick }) => {\n\tconst [content, setContent] = React.useState('');\n\n\tconst handleSetContent = (e) => setContent(e.target.value);\n\n\tconst handleClick = () => {\n\t\tonClick(content);\n\t\tsetContent('');\n\t};\n\n\treturn (\n\t\t<Comment\n\t\t\tavatar={<Avatar src={user.avatar_url} alt={user.first_name} />}\n\t\t\tcontent={\n\t\t\t\t<>\n\t\t\t\t\t<Form.Item>\n\t\t\t\t\t\t<Input.TextArea\n\t\t\t\t\t\t\trows={4}\n\t\t\t\t\t\t\tonChange={handleSetContent}\n\t\t\t\t\t\t\tvalue={content}\n\t\t\t\t\t\t\tplaceholder=\"Type your message...\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"ant-btn ant-btn-primary\"\n\t\t\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\t\t\tdisabled={!content}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSend\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t</>\n\t\t\t}\n\t\t/>\n\t);\n};\n\nMessageForm.propTypes = {\n\tuser: PropTypes.object.isRequired,\n\tisLoading: PropTypes.bool.isRequired,\n\tonClick: PropTypes.func.isRequired\n};\n\nexport default MessageForm;\n","import styled from 'styled-components';\n\nexport const ConversationHeader = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tborder-bottom: 1px solid lightgrey;\n\tpadding: 0 5px 0 0;\n\tjustify-content: space-between;\n`;\n\nexport const Left = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\n\t& > .ant-avatar {\n\t\tmargin: 10px;\n\t}\n\n\t& > .ant-typography {\n\t\tmargin: 0;\n\t}\n`;\n\nexport const Icons = styled.div`\n\t& > span {\n\t\tfont-size: 20px;\n\t\tmargin-right: 20px;\n\t}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, Avatar, Tooltip } from 'antd';\nimport { BellOutlined, StarOutlined, UserAddOutlined } from '@ant-design/icons';\n\nimport * as S from './styles';\n\nconst ConversationHeader = ({ participant }) => {\n\tconst name = `${participant.first_name} ${participant.last_name}`;\n\treturn (\n\t\t<S.ConversationHeader>\n\t\t\t<S.Left>\n\t\t\t\t<Avatar size={60} src={participant.avatar_url} alt={name} />\n\t\t\t\t<Typography.Title level={3}>{name}</Typography.Title>\n\t\t\t</S.Left>\n\t\t\t<S.Icons>\n\t\t\t\t<Tooltip title={'Add to friends'}>\n\t\t\t\t\t<UserAddOutlined />\n\t\t\t\t</Tooltip>\n\t\t\t\t<Tooltip title={'Add to favorites'}>\n\t\t\t\t\t<StarOutlined />\n\t\t\t\t</Tooltip>\n\t\t\t\t<Tooltip title={'Notify me'}>\n\t\t\t\t\t<BellOutlined />\n\t\t\t\t</Tooltip>\n\t\t\t</S.Icons>\n\t\t</S.ConversationHeader>\n\t);\n};\n\nConversationHeader.propTypes = {\n\tparticipant: PropTypes.object\n};\n\nConversationHeader.defaultProps = {\n\tparticipant: {}\n};\n\nexport default ConversationHeader;\n","import styled from 'styled-components';\nimport { Layout as L } from 'antd';\n\nexport const Layout = styled(L)`\n\theight: 100vh;\n`;\n\nexport const Content = styled(L.Content)`\n\tdisplay: flex;\n\tflex-direction: row;\n\tpadding: 20px 50px;\n`;\n\nexport const ListWrapper = styled.div`\n\twidth: 100%;\n\tmargin: 0 20px;\n`;\n","import React from 'react';\nimport { Spin } from 'antd';\nimport PropTypes from 'prop-types';\nimport Header from 'components/Header';\nimport ConversationList from 'components/ConversationList';\nimport MessageList from 'components/MessageList';\nimport MessageForm from 'components/MessageForm';\nimport ConversationHeader from 'components/ConversationHeader';\n\nimport * as S from './styles';\n\nconst ConversationComponent = ({\n\tgetConversations,\n\tgetConversationById,\n\tconversations,\n\tmessages,\n\tisLoading,\n\tuser,\n\tgetUser,\n\tpostMessage,\n\tcurrentConversationId\n}) => {\n\tconst [participant, setParticipant] = React.useState({});\n\n\tReact.useEffect(() => {\n\t\tgetUser();\n\t\tgetConversations();\n\t}, [getUser, getConversations]);\n\n\tconst handleListItemClick = (id, currParticipant) => {\n\t\tgetConversationById(id);\n\t\tsetParticipant(currParticipant);\n\t};\n\n\tconst handleSendClick = (content) => {\n\t\tpostMessage(content);\n\t};\n\n\treturn (\n\t\t<S.Layout>\n\t\t\t<Header user={user} />\n\t\t\t<S.Content>\n\t\t\t\t<ConversationList\n\t\t\t\t\tconversations={conversations}\n\t\t\t\t\tonClick={handleListItemClick}\n\t\t\t\t\tloggedUserId={user.id}\n\t\t\t\t\tcurrentConversationId={currentConversationId}\n\t\t\t\t/>\n\t\t\t\t<S.ListWrapper>\n\t\t\t\t\t<Spin spinning={isLoading}>\n\t\t\t\t\t\t{messages.length ? (\n\t\t\t\t\t\t\t<ConversationHeader participant={participant} />\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t<MessageList messages={messages} loggedUserId={user.id} />\n\t\t\t\t\t\t{messages.length ? (\n\t\t\t\t\t\t\t<MessageForm\n\t\t\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\tonClick={handleSendClick}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</Spin>\n\t\t\t\t</S.ListWrapper>\n\t\t\t</S.Content>\n\t\t</S.Layout>\n\t);\n};\n\nConversationComponent.propTypes = {\n\tgetConversations: PropTypes.func.isRequired,\n\tgetConversationById: PropTypes.func.isRequired,\n\tconversations: PropTypes.array.isRequired,\n\tmessages: PropTypes.array.isRequired,\n\tisLoading: PropTypes.bool.isRequired,\n\tuser: PropTypes.object.isRequired,\n\tgetUser: PropTypes.func.isRequired,\n\tpostMessage: PropTypes.func.isRequired,\n\tcurrentConversationId: PropTypes.string\n};\n\nConversationComponent.defaultProps = {\n\tcurrentConversationId: null\n};\n\nexport default ConversationComponent;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { actionCreators as conversationActionCreators } from 'ducks/conversationDuck';\nimport { actionCreators as userActionCreators } from 'ducks/userDuck';\n\nimport ConversationComponent from './component';\n\nconst mapStateToProps = (state) => {\n\tconst {\n\t\tconversations,\n\t\tmessages,\n\t\tisLoading,\n\t\tcurrentConversationId\n\t} = state.conversation;\n\n\tconst { user } = state.user;\n\n\treturn { conversations, messages, isLoading, user, currentConversationId };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn bindActionCreators(\n\t\t{\n\t\t\t...conversationActionCreators,\n\t\t\t...userActionCreators\n\t\t},\n\t\tdispatch\n\t);\n};\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(ConversationComponent);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport store from 'store';\nimport 'antd/dist/antd.css';\nimport { theme } from 'config';\n// Screens\nimport ConversationScreen from 'screens/ConversationScreen';\n\nconst App = () => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<ConversationScreen />\n\t\t\t</ThemeProvider>\n\t\t</Provider>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}